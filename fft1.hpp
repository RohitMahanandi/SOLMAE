
#include <iostream>
#include <vector>
#include <complex>
#include <bits/stdc++.h>
using namespace std;
std::vector<std::complex<double>> phi4_roots = {
    {1.00000000000000, -1.00000000000000},
};

    // The roots of phi_8 = x^4 + 1
    // phi8_roots = [0.707106781186548 + 0.707106781186547}, ...]
    std::vector<std::complex<double>> phi8_roots = {
        {0.707106781186548, 0.707106781186547},
        {-0.707106781186548, -0.707106781186547},
        {0.707106781186548, -0.707106781186547},
        {-0.707106781186548, 0.707106781186547}
    };

    // The roots of phi_16 = x^8 + 1
    // phi16_roots = [0.923879532511287 + 0.382683432365090}, ...]
    std::vector<std::complex<double>> phi16_roots = {
        {0.923879532511287, 0.382683432365090},
        {-0.923879532511287, -0.382683432365090},
        {0.382683432365090, -0.923879532511287},
        {-0.382683432365090, 0.923879532511287},
        {0.923879532511287, -0.382683432365090},
        {-0.923879532511287, 0.382683432365090},
        {0.382683432365090, 0.923879532511287},
        {-0.382683432365090, -0.923879532511287}
    };

    // The roots of phi_32 = x^16 + 1
    // phi32_roots = [0.980785280403230 + 0.195090322016128}, ...]
    std::vector<std::complex<double>> phi32_roots = {
        {0.980785280403230, 0.195090322016128},
        {-0.980785280403230, -0.195090322016128},
        {0.195090322016128, -0.980785280403230},
        {-0.195090322016128, 0.980785280403230},
        {0.831469612302545, -0.555570233019602},
        {-0.831469612302545, 0.555570233019602},
        {0.555570233019602, 0.831469612302545},
        {-0.555570233019602, -0.831469612302545},
        {0.980785280403230, -0.195090322016128},
        {-0.980785280403230, 0.195090322016128},
        {0.195090322016128, 0.980785280403230},
        {-0.195090322016128, -0.980785280403230},
        {0.831469612302545, 0.555570233019602},
        {-0.831469612302545, -0.555570233019602},
        {0.555570233019602, -0.831469612302545},
        {-0.555570233019602, 0.831469612302545}
    };

    // The roots of phi_64 = x^32 + 1
    // phi64_roots = [0.995184726672197 + 0.0980171403295606}, ...]
    std::vector<std::complex<double>> phi64_roots = {
        {0.995184726672197, 0.0980171403295606},
        {-0.995184726672197, -0.0980171403295606},
        {0.0980171403295606, -0.995184726672197},
        {-0.0980171403295606, 0.995184726672197},
        {0.773010453362737, -0.634393284163646},
        {-0.773010453362737, 0.634393284163646},
        {0.634393284163645, 0.773010453362737},
        {-0.634393284163645, -0.773010453362737},
        {0.956940335732209, -0.290284677254462},
        {-0.956940335732209, 0.290284677254462},
        {0.290284677254462, 0.956940335732209},
        {-0.290284677254462, -0.956940335732209},
        {0.881921264348355, 0.471396736825998},
        {-0.881921264348355, -0.471396736825998},
        {0.471396736825998, -0.881921264348355},
        {-0.471396736825998, 0.881921264348355},
        {0.995184726672197, -0.0980171403295606},
        {-0.995184726672197, 0.0980171403295606},
        {0.0980171403295606, 0.995184726672197},
        {-0.0980171403295606, -0.995184726672197},
        {0.773010453362737, 0.634393284163646},
        {-0.773010453362737, -0.634393284163646},
        {0.634393284163645, -0.773010453362737},
        {-0.634393284163645, 0.773010453362737},
        {0.956940335732209, 0.290284677254462},
        {-0.956940335732209, -0.290284677254462},
        {0.290284677254462, -0.956940335732209},
        {-0.290284677254462, 0.956940335732209},
        {0.881921264348355, -0.471396736825998},
        {-0.881921264348355, 0.471396736825998},
        {0.471396736825998, 0.881921264348355},
        {-0.471396736825998, -0.881921264348355}
    };

    // The roots of phi_128 = x^64 + 1
    // phi128_roots = [0.998795456205172 + 0.0490676743274180}, ...]
    std::vector<std::complex<double>> phi128_roots = {
        {0.998795456205172, 0.0490676743274180},
        {-0.998795456205172, -0.0490676743274180},
        {0.0490676743274180, -0.998795456205172},
        {-0.0490676743274180, 0.998795456205172},
        {0.740951125354959, -0.671558954847018},
        {-0.740951125354959, 0.671558954847018},
        {0.671558954847018, 0.740951125354959},
        {-0.671558954847018, -0.740951125354959},
        {0.941544065183021, -0.336889853392220},
        {-0.941544065183021, 0.336889853392220},
        {0.336889853392220, 0.941544065183021},
        {-0.336889853392220, -0.941544065183021},
        {0.903989293123443, 0.427555093430282},
        {-0.903989293123443, -0.427555093430282},
        {0.427555093430282, -0.903989293123443},
        {-0.427555093430282, 0.903989293123443},
        {0.989176509964781, -0.146730474455362},
        {-0.989176509964781, 0.146730474455362},
        {0.146730474455362, 0.989176509964781},
        {-0.146730474455362, -0.989176509964781},
        {0.803207531480645, 0.595699304492433},
        {-0.803207531480645, -0.595699304492433},
        {0.595699304492433, -0.803207531480645},
        {-0.595699304492433, 0.803207531480645},
        {0.970031253194544, 0.242980179903264},
        {-0.970031253194544, -0.242980179903264},
        {0.242980179903264, -0.970031253194544},
        {-0.242980179903264, 0.970031253194544},
        {0.857728610000272, -0.514102744193222},
        {-0.857728610000272, 0.514102744193222},
        {0.514102744193222, 0.857728610000272},
        {-0.514102744193222, -0.857728610000272},
        {0.998795456205172, -0.0490676743274180},
        {-0.998795456205172, 0.0490676743274180},
        {0.0490676743274180, 0.998795456205172},
        {-0.0490676743274180, -0.998795456205172},
        {0.740951125354959, 0.671558954847018},
        {-0.740951125354959, -0.671558954847018},
        {0.671558954847018, -0.740951125354959},
        {-0.671558954847018, 0.740951125354959},
        {0.941544065183021, 0.336889853392220},
        {-0.941544065183021, -0.336889853392220},
        {0.336889853392220, -0.941544065183021},
        {-0.336889853392220, 0.941544065183021},
        {0.903989293123443, -0.427555093430282},
        {-0.903989293123443, 0.427555093430282},
        {0.427555093430282, 0.903989293123443},
        {-0.427555093430282, -0.903989293123443}
    };

    
 
    std::vector<std::complex<double>> phi256_roots = {
        {0.999698818696204, 0.0245412285229123},
        {-0.999698818696204, -0.0245412285229123},
        {0.0245412285229123, -0.999698818696204},
        {-0.0245412285229123, 0.999698818696204},
        {0.724247082951467, -0.689540544737067},
        {-0.724247082951467, 0.689540544737067},
        {0.689540544737067, 0.724247082951467},
        {-0.689540544737067, -0.724247082951467},
        {0.932992798834739, -0.359895036534988},
        {-0.932992798834739, 0.359895036534988},
        {0.359895036534988, 0.932992798834739},
        {-0.359895036534988, -0.932992798834739},
        {0.914209755703531, 0.405241314004990},
        {-0.914209755703531, -0.405241314004990},
        {0.405241314004990, -0.914209755703531},
        {-0.405241314004990, 0.914209755703531},
        {0.985277642388941, -0.170961888760301},
        {-0.985277642388941, 0.170961888760301},
        {0.170961888760301, 0.985277642388941},
        {-0.170961888760301, -0.985277642388941},
        {0.817584813151584, 0.575808191417845},
        {-0.817584813151584, -0.575808191417845},
        {0.575808191417845, -0.817584813151584},
        {-0.575808191417845, 0.817584813151584},
        {0.975702130038529, 0.219101240156870},
        {-0.975702130038529, -0.219101240156870},
        {0.219101240156870, -0.975702130038529},
        {-0.219101240156870, 0.975702130038529},
        {0.844853565249707, -0.534997619887097},
        {-0.844853565249707, 0.534997619887097},
        {0.534997619887097, 0.844853565249707},
        {-0.534997619887097, -0.844853565249707},
        {0.997290456678690, -0.0735645635996674},
        {-0.997290456678690, 0.0735645635996674},
        {0.0735645635996674, 0.997290456678690},
        {-0.0735645635996674, -0.997290456678690},
        {0.757208846506485, 0.653172842953777},
        {-0.757208846506485, -0.653172842953777},
        {0.653172842953777, -0.757208846506485},
        {-0.653172842953777, 0.757208846506485},
        {0.949528180593037, 0.313681740398892},
        {-0.949528180593037, -0.313681740398892},
        {0.313681740398892, -0.949528180593037},
        {-0.313681740398892, 0.949528180593037},
        {0.893224301195515, -0.449611329654607},
        {-0.893224301195515, 0.449611329654607},
        {0.449611329654607, 0.893224301195515},
        {-0.449611329654607, -0.893224301195515},
        {0.992479534598710, 0.122410675199216},
        {-0.992479534598710, -0.122410675199216},
        {0.122410675199216, -0.992479534598710},
        {-0.122410675199216, 0.992479534598710},
        {0.788346427626606, -0.615231590580627},
        {-0.788346427626606, 0.615231590580627},
        {0.615231590580627, 0.788346427626606},
        {-0.615231590580627, -0.788346427626606},
        {0.963776065795440, 0.266712757474898},
        {-0.963776065795440, -0.266712757474898},
        {0.266712757474898, -0.963776065795440},
        {-0.266712757474898, 0.963776065795440},
        {0.870086991108711, 0.492898192229784},
        {-0.870086991108711, -0.492898192229784},
        {0.492898192229784, -0.870086991108711},
        {-0.492898192229784, 0.870086991108711},
        {0.999698818696204, -0.0245412285229123},
        {-0.999698818696204, 0.0245412285229123},
        {0.0245412285229123, 0.999698818696204},
        {-0.0245412285229123, -0.999698818696204},
        {0.724247082951467, 0.689540544737067},
        {-0.724247082951467, -0.689540544737067},
        {0.689540544737067, -0.724247082951467},
        {-0.689540544737067, 0.724247082951467},
        {0.932992798834739, 0.359895036534988},
        {-0.932992798834739, -0.359895036534988},
        {0.359895036534988, -0.932992798834739},
        {-0.359895036534988, 0.932992798834739},
        {0.914209755703531, -0.405241314004990},
        {-0.914209755703531, 0.405241314004990},
        {0.405241314004990, 0.914209755703531},
        {-0.405241314004990, -0.914209755703531},
        {0.985277642388941, 0.170961888760301},
        {-0.985277642388941, -0.170961888760301},
        {0.170961888760301, -0.985277642388941},
        {-0.170961888760301, 0.985277642388941},
        {0.817584813151584, 0.575808191417845},
        {-0.817584813151584, -0.575808191417845},
        {0.575808191417845, -0.817584813151584},
        {-0.575808191417845, 0.817584813151584},
        {0.975702130038529, 0.219101240156870},
        {-0.975702130038529, -0.219101240156870},
        {0.219101240156870, -0.975702130038529},
        {-0.219101240156870, 0.975702130038529},
        {0.844853565249707, -0.534997619887097},
        {-0.844853565249707, 0.534997619887097},
        {0.534997619887097, 0.844853565249707},
        {-0.534997619887097, -0.844853565249707},
        {0.997290456678690, -0.0735645635996674},
        {-0.997290456678690, 0.0735645635996674},
        {0.0735645635996674, 0.997290456678690},
        {-0.0735645635996674, -0.997290456678690},
        {0.757208846506485, 0.653172842953777},
        {-0.757208846506485, -0.653172842953777},
        {0.653172842953777, -0.757208846506485},
        {-0.653172842953777, 0.757208846506485},
        {0.949528180593037, 0.313681740398892},
        {-0.949528180593037, -0.313681740398892},
        {0.313681740398892, -0.949528180593037},
        {-0.313681740398892, 0.949528180593037},
        {0.893224301195515, -0.449611329654607},
        {-0.893224301195515, 0.449611329654607},
        {0.449611329654607, 0.893224301195515},
        {-0.449611329654607, -0.893224301195515},
        {0.992479534598710, 0.122410675199216},
        {-0.992479534598710, -0.122410675199216},
        {0.122410675199216, -0.992479534598710},
        {-0.122410675199216, 0.992479534598710},
        {0.788346427626606, -0.615231590580627},
        {-0.788346427626606, 0.615231590580627},
        {0.615231590580627, 0.788346427626606},
        {-0.615231590580627, -0.788346427626606},
        {0.963776065795440, 0.266712757474898},
        {-0.963776065795440, -0.266712757474898},
        {0.266712757474898, -0.963776065795440},
        {-0.266712757474898, 0.963776065795440},
        {0.870086991108711, 0.492898192229784},
        {-0.870086991108711, -0.492898192229784},
        {0.492898192229784, -0.870086991108711},
        {-0.492898192229784, 0.870086991108711}
    };


    std::vector<std::complex<double>> phi512_roots = {
        {0.999924701839145 , 0.0122715382857199},
{-0.999924701839145,-0.0122715382857199},
{0.0122715382857199,-0.999924701839145},
{-0.0122715382857199 , 0.999924701839145},
{0.715730825283819,-0.698376249408973},
{-0.715730825283819 , 0.698376249408973},
{0.698376249408973 , 0.715730825283819},
{-0.698376249408973,-0.715730825283819},
{0.928506080473216,-0.371317193951837},
{-0.928506080473216 , 0.371317193951837},
{0.371317193951837 , 0.928506080473216},
{-0.371317193951837,-0.928506080473216},
{0.919113851690058 , 0.393992040061048},
{-0.919113851690058,-0.393992040061048},
{0.393992040061048,-0.919113851690058},
{-0.393992040061048 , 0.919113851690058},
{0.983105487431216,-0.183039887955141},
{-0.983105487431216 , 0.183039887955141},
{0.183039887955141 , 0.983105487431216},
{-0.183039887955141,-0.983105487431216},
{0.824589302785025 , 0.565731810783613},
{-0.824589302785025,-0.565731810783613},
{0.565731810783613,-0.824589302785025},
{-0.565731810783613 , 0.824589302785025},
{0.978317370719628 , 0.207111376192219},
{-0.978317370719628,-0.207111376192219},
{0.207111376192219,-0.978317370719628},
{-0.207111376192219 , 0.978317370719628},
{0.838224705554838,-0.545324988422046},
{-0.838224705554838 , 0.545324988422046},
{0.545324988422046 , 0.838224705554838},
{-0.545324988422046,-0.838224705554838},
{0.996312612182778,-0.0857973123444399},
{-0.996312612182778 , 0.0857973123444399},
{0.0857973123444399 , 0.996312612182778},
{-0.0857973123444399,-0.996312612182778},
{0.765167265622459 , 0.643831542889791},
{-0.765167265622459,-0.643831542889791},
{0.643831542889791,-0.765167265622459},
{-0.643831542889791 , 0.765167265622459},
{0.953306040354194 , 0.302005949319228},
{-0.953306040354194,-0.302005949319228},
{0.302005949319228,-0.953306040354194},
{-0.302005949319228 , 0.953306040354194},
{0.887639620402854,-0.460538710958240},
{-0.887639620402854 , 0.460538710958240},
{0.460538710958240 , 0.887639620402854},
{-0.460538710958240,-0.887639620402854},
{0.993906970002356 , 0.110222207293883},
{-0.993906970002356,-0.110222207293883},
{0.110222207293883,-0.993906970002356},
{-0.110222207293883 , 0.993906970002356},
{0.780737228572094,-0.624859488142386},
{-0.780737228572094 , 0.624859488142386},
{0.624859488142386 , 0.780737228572094},
{-0.624859488142386,-0.780737228572094},
{0.960430519415566,-0.278519689385053},
{-0.960430519415566 , 0.278519689385053},
{0.278519689385053 , 0.960430519415566},
{-0.278519689385053,-0.960430519415566},
{0.876070094195407 , 0.482183772079123},
{-0.876070094195407,-0.482183772079123},
{0.482183772079123,-0.876070094195407},
{-0.482183772079123 , 0.876070094195407},
{0.999322384588350,-0.0368072229413588},
{-0.999322384588350 , 0.0368072229413588},
{0.0368072229413588 , 0.999322384588350},
{-0.0368072229413588,-0.999322384588350},
{0.732654271672413 , 0.680600997795453},
{-0.732654271672413,-0.680600997795453},
{0.680600997795453,-0.732654271672413},
{-0.680600997795453 , 0.732654271672413},
{0.937339011912575 , 0.348418680249435},
{-0.937339011912575,-0.348418680249435},
{0.348418680249435,-0.937339011912575},
{-0.348418680249435 , 0.937339011912575},
{0.909167983090522,-0.416429560097637},
{-0.909167983090522 , 0.416429560097637},
{0.416429560097637 , 0.909167983090522},
{-0.416429560097637,-0.909167983090522},
{0.987301418157858 , 0.158858143333861},
{-0.987301418157858,-0.158858143333861},
{0.158858143333861,-0.987301418157858},
{-0.158858143333861 , 0.987301418157858},
{0.810457198252595,-0.585797857456439},
{-0.810457198252595 , 0.585797857456439},
{0.585797857456439 , 0.810457198252595},
{-0.585797857456439,-0.810457198252595},
{0.972939952205560,-0.231058108280671},
{-0.972939952205560 , 0.231058108280671},
{0.231058108280671 , 0.972939952205560},
{-0.231058108280671,-0.972939952205560},
{0.851355193105265 , 0.524589682678469},
{-0.851355193105265,-0.524589682678469},
{0.524589682678469,-0.851355193105265},
{-0.524589682678469 , 0.851355193105265},
{0.998118112900149 , 0.0613207363022086},
{-0.998118112900149,-0.0613207363022086},
{0.0613207363022086,-0.998118112900149},
{-0.0613207363022086 , 0.998118112900149},
{0.749136394523459,-0.662415777590172},
{-0.749136394523459 , 0.662415777590172},
{0.662415777590172 , 0.749136394523459},
{-0.662415777590172,-0.749136394523459},
{0.945607325380521,-0.325310292162263},
{-0.945607325380521 , 0.325310292162263},
{0.325310292162263 , 0.945607325380521},
{-0.325310292162263,-0.945607325380521},
{0.898674465693954 , 0.438616238538528},
{-0.898674465693954,-0.438616238538528},
{0.438616238538528,-0.898674465693954},
{-0.438616238538528 , 0.898674465693954},
{0.990902635427780,-0.134580708507126},
{-0.990902635427780 , 0.134580708507126},
{0.134580708507126 , 0.990902635427780},
{-0.134580708507126,-0.990902635427780},
{0.795836904608884 , 0.605511041404325},
{-0.795836904608884,-0.605511041404325},
{0.605511041404326,-0.795836904608883},
{-0.605511041404326 , 0.795836904608883},
{0.966976471044852 , 0.254865659604515},
{-0.966976471044852,-0.254865659604515},
{0.254865659604515,-0.966976471044852},
{-0.254865659604515 , 0.966976471044852},
{0.863972856121587,-0.503538383725718},
{-0.863972856121587 , 0.503538383725718},
{0.503538383725718 , 0.863972856121587},
{-0.503538383725718,-0.863972856121587},
{0.999924701839145,-0.0122715382857199},
{-0.999924701839145 , 0.0122715382857199},
{0.0122715382857199 , 0.999924701839145},
{-0.0122715382857199,-0.999924701839145},
{0.715730825283819 , 0.698376249408973},
{-0.715730825283819,-0.698376249408973},
{0.698376249408973,-0.715730825283819},
{-0.698376249408973 , 0.715730825283819},
{0.928506080473216 , 0.371317193951837},
{-0.928506080473216,-0.371317193951837},
{0.371317193951837,-0.928506080473216},
{-0.371317193951837 , 0.928506080473216},
{0.919113851690058,-0.393992040061048},
{-0.919113851690058 , 0.393992040061048},
{0.393992040061048 , 0.919113851690058},
{-0.393992040061048,-0.919113851690058},
{0.983105487431216 , 0.183039887955141},
{-0.983105487431216,-0.183039887955141},
{0.183039887955141,-0.983105487431216},
{-0.183039887955141 , 0.983105487431216},
{0.824589302785025,-0.565731810783613},
{-0.824589302785025 , 0.565731810783613},
{0.565731810783613 , 0.824589302785025},
{-0.565731810783613,-0.824589302785025},
{0.978317370719628,-0.207111376192219},
{-0.978317370719628 , 0.207111376192219},
{0.207111376192219 , 0.978317370719628},
{-0.207111376192219,-0.978317370719628},
{0.838224705554838 , 0.545324988422046},
{-0.838224705554838,-0.545324988422046},
{0.545324988422046,-0.838224705554838},
{-0.545324988422046 , 0.838224705554838},
{0.996312612182778 , 0.0857973123444399},
{-0.996312612182778,-0.0857973123444399},
{0.0857973123444399,-0.996312612182778},
{-0.0857973123444399 , 0.996312612182778},
{0.765167265622459,-0.643831542889791},
{-0.765167265622459 , 0.643831542889791},
{0.643831542889791 , 0.765167265622459},
{-0.643831542889791,-0.765167265622459},
{0.953306040354194,-0.302005949319228},
{-0.953306040354194 , 0.302005949319228},
{0.302005949319228 , 0.953306040354194},
{-0.302005949319228,-0.953306040354194},
{0.887639620402854 , 0.460538710958240},
{-0.887639620402854,-0.460538710958240},
{0.460538710958240,-0.887639620402854},
{-0.460538710958240 , 0.887639620402854},
{0.993906970002356,-0.110222207293883},
{-0.993906970002356 , 0.110222207293883},
{0.110222207293883 , 0.993906970002356},
{-0.110222207293883,-0.993906970002356},
{0.780737228572094 , 0.624859488142386},
{-0.780737228572094,-0.624859488142386},
{0.624859488142386,-0.780737228572094},
{-0.624859488142386 , 0.780737228572094},
{0.960430519415566 , 0.278519689385053},
{-0.960430519415566,-0.278519689385053},
{0.278519689385053,-0.960430519415566},
{-0.278519689385053 , 0.960430519415566},
{0.876070094195407,-0.482183772079123},
{-0.876070094195407 , 0.482183772079123},
{0.482183772079123 , 0.876070094195407},
{-0.482183772079123,-0.876070094195407},
{0.999322384588350 , 0.0368072229413588},
{-0.999322384588350,-0.0368072229413588},
{0.0368072229413588,-0.999322384588350},
{-0.0368072229413588 , 0.999322384588350},
{0.732654271672413,-0.680600997795453},
{-0.732654271672413 , 0.680600997795453},
{0.680600997795453 , 0.732654271672413},
{-0.680600997795453,-0.732654271672413},
{0.937339011912575,-0.348418680249435},
{-0.937339011912575 , 0.348418680249435},
{0.348418680249435 , 0.937339011912575},
{-0.348418680249435,-0.937339011912575},
{0.909167983090522 , 0.416429560097637},
{-0.909167983090522,-0.416429560097637},
{0.416429560097637,-0.909167983090522},
{-0.416429560097637 , 0.909167983090522},
{0.987301418157858,-0.158858143333861},
{-0.987301418157858 , 0.158858143333861},
{0.158858143333861 , 0.987301418157858},
{-0.158858143333861,-0.987301418157858},
{0.810457198252595 , 0.585797857456439},
{-0.810457198252595,-0.585797857456439},
{0.585797857456439,-0.810457198252595},
{-0.585797857456439 , 0.810457198252595},
{0.972939952205560 , 0.231058108280671},
{-0.972939952205560,-0.231058108280671},
{0.231058108280671,-0.972939952205560},
{-0.231058108280671 , 0.972939952205560},
{0.851355193105265,-0.524589682678469},
{-0.851355193105265 , 0.524589682678469},
{0.524589682678469 , 0.851355193105265},
{-0.524589682678469,-0.851355193105265},
{0.998118112900149,-0.0613207363022086},
{-0.998118112900149 , 0.0613207363022086},
{0.0613207363022086 , 0.998118112900149},
{-0.0613207363022086,-0.998118112900149},
{0.749136394523459 , 0.662415777590172},
{-0.749136394523459,-0.662415777590172},
{0.662415777590172,-0.749136394523459},
{-0.662415777590172 , 0.749136394523459},
{0.945607325380521 , 0.325310292162263},
{-0.945607325380521,-0.325310292162263},
{0.325310292162263,-0.945607325380521},
{-0.325310292162263 , 0.945607325380521},
{0.898674465693954,-0.438616238538528},
{-0.898674465693954 , 0.438616238538528},
{0.438616238538528 , 0.898674465693954},
{-0.438616238538528,-0.898674465693954},
{0.990902635427780 , 0.134580708507126},
{-0.990902635427780,-0.134580708507126},
{0.134580708507126,-0.990902635427780},
{-0.134580708507126 , 0.990902635427780},
{0.795836904608884,-0.605511041404325},
{-0.795836904608884 , 0.605511041404325},
{0.605511041404326 , 0.795836904608883},
{-0.605511041404326,-0.795836904608883},
{0.966976471044852,-0.254865659604515},
{-0.966976471044852 , 0.254865659604515},
{0.254865659604515 , 0.966976471044852},
{-0.254865659604515,-0.966976471044852},
{0.863972856121587 , 0.503538383725718},
{-0.863972856121587,-0.503538383725718},
{0.503538383725718,-0.863972856121587},
{-0.503538383725718 , 0.863972856121587}
};
typedef std::complex<double> Complex;
map<int, vector<complex<double>>>roots_dict = {
        {2, phi4_roots},
        {4, phi8_roots},
        {8, phi16_roots},
        {16, phi32_roots},
        {32, phi64_roots},
        {64, phi128_roots},
        {128, phi256_roots},
        {256, phi512_roots}
        // Add other values here...
    };

 
std::vector<Complex> merge(std::vector<Complex>& f0, std::vector<Complex>& f1) {
    int n = f0.size();
    std::vector<Complex> f(n);

    for (int i = 0; i < n; ++i) {
        f[i] = f0[i] + f1[i];
    }

    return f;
}





vector<vector<std::complex<double>>> split_fft(const std::vector<std::complex<double>>& f_fft) {
    int n = f_fft.size();
    std::vector<std::complex<double>> w = roots_dict[n];
    std::vector<std::complex<double>> f0_fft(n / 2);
    std::vector<std::complex<double>> f1_fft(n / 2);
    for (int i = 0; i < n / 2; i++) {
        f0_fft[i] = 0.5 * (f_fft[2 * i] + f_fft[2 * i + 1]);
        f1_fft[i] = 0.5 * (f_fft[2 * i] - f_fft[2 * i + 1]) * std::conj(w[2 * i]);
    }
    return {f0_fft, f1_fft};
}

std::vector<std::complex<double>> merge_fft(const std::vector<std::vector<std::complex<double>>>& f_list_fft) {
    std::vector<std::complex<double>> f0_fft = f_list_fft[0];
    std::vector<std::complex<double>> f1_fft = f_list_fft[1];
    int n = 2 * f0_fft.size();
    std::vector<std::complex<double>> w = roots_dict[n];
    std::vector<std::complex<double>> f_fft(n);
    for (int i = 0; i < n / 2; i++) {
        f_fft[2 * i + 0] = f0_fft[i] + w[2 * i] * f1_fft[i];
        f_fft[2 * i + 1] = f0_fft[i] - w[2 * i] * f1_fft[i];
    }
    return f_fft;
}

std::vector<std::complex<double>> fft(const std::vector<Complex>& f) {
    int n = f.size();
    if (n > 2) {
        std::vector<double> f0(f.begin(), f.begin() + n / 2);
        std::vector<double> f1(f.begin() + n / 2, f.end());
        std::vector<std::complex<double>> f0_fft = fft(f0);
        std::vector<std::complex<double>> f1_fft = fft(f1);
        return merge_fft({f0_fft, f1_fft});
    } else if (n == 2) {
        std::vector<std::complex<double>> f_fft(2);
        f_fft[0] = f[0] + std::complex<double>(0.0, 1.0) * f[1];
        f_fft[1] = f[0] - std::complex<double>(0.0, 1.0) * f[1];
        return f_fft;
    }
    return {};
}

std::vector<Complex> ifft(const std::vector<std::complex<double>>& f_fft) {
    int n = f_fft.size();
    if (n > 2) {
        std::vector<std::complex<double>> f0_fft, f1_fft;
        vector<vector<Complex>> hello = split_fft(f_fft);
        f0_fft = hello[0];
        f1_fft = hello[1];
        std::vector<Complex> f0 = ifft(f0_fft);
        std::vector<Complex> f1 = ifft(f1_fft);
        return merge(f0, f1);
    } else if (n == 2) {
        std::vector<Complex> f(2);
        f[0] = f_fft[0].real();
        f[1] = f_fft[0].imag();
        return f;
    }
    return {};
}

std::vector<double> Solmae_fft(const std::vector<double>& f) {
    int n = f.size();
    std::vector<std::complex<double>> f_fft = fft(f);
    std::vector<double> solmae_f_fft;
    for (int i = 0; i < n / 2; i++) {
        solmae_f_fft.push_back(f_fft[i].real());
    }
    for (int i = 0; i < n / 2; i++) {
        solmae_f_fft.push_back(f_fft[i].imag());
    }
    return solmae_f_fft;
}

std::vector<Complex> Solmae_ifft(const std::vector<double>& solmae_f_fft) {
    int n = solmae_f_fft.size();
    std::vector<std::complex<double>> f_fft;
    for (int i = 0; i < n / 2; i++) {
        f_fft.push_back(std::complex<double>(solmae_f_fft[i], solmae_f_fft[i + n / 2]));
    }
    for (int i = 0; i < n / 2; i++) {
        f_fft.push_back(std::complex<double>(solmae_f_fft[i], -solmae_f_fft[i + n / 2]));
    }
    return ifft(f_fft);
}

std::vector<double> cut_half_fft(const std::vector<std::complex<double>>& f_fft) {
    int n = f_fft.size();
    std::vector<double> cut_fft;
    for (int i = 0; i < n / 2; i++) {
        cut_fft.push_back(f_fft[i].real());
    }
    for (int i = 0; i < n / 2; i++) {
        cut_fft.push_back(f_fft[i].imag());
    }
    return cut_fft;
}

std::vector<double> add(const std::vector<double>& f, const std::vector<double>& g) {
    assert(f.size() == g.size());
    int deg = f.size();
    std::vector<double> result(deg);
    for (int i = 0; i < deg; i++) {
        result[i] = f[i] + g[i];
    }
    return result;
}

std::vector<double> neg(const std::vector<double>& f) {
    int deg = f.size();
    std::vector<double> result(deg);
    for (int i = 0; i < deg; i++) {
        result[i] = -f[i];
    }
    return result;
}
std::vector<std::complex<double>> mul_fft(const std::vector<std::complex<double>>& f_fft, const std::vector<std::complex<double>>& g_fft) {
    int deg = f_fft.size();
    std::vector<std::complex<double>> result(deg);
    for (int i = 0; i < deg; i++) {
        result[i] = f_fft[i] * g_fft[i];
    }
    return result;
}
std::vector<std::complex<double>> add_fft(const std::vector<std::complex<double>>& f_fft, const std::vector<std::complex<double>>& g_fft) {
    assert(f_fft.size() == g_fft.size());
    int deg = f_fft.size();
    std::vector<std::complex<double>> result(deg);
    for (int i = 0; i < deg; i++) {
        result[i] = f_fft[i] + g_fft[i];
    }
    return result;
}

std::vector<std::complex<double>> sub_fft(const std::vector<std::complex<double>>& f_fft, const std::vector<std::complex<double>>& g_fft) {
    assert(f_fft.size() == g_fft.size());
    int deg = f_fft.size();
    std::vector<std::complex<double>> result(deg);
    for (int i = 0; i < deg; i++) {
        result[i] = f_fft[i] - g_fft[i];
    }
    return result;
}



std::vector<std::complex<double>> div_fft(const std::vector<std::complex<double>>& f_fft, const std::vector<std::complex<double>>& g_fft) {
    assert(f_fft.size() == g_fft.size());
    int deg = f_fft.size();
    std::vector<std::complex<double>> result(deg);
    for (int i = 0; i < deg; i++) {
        result[i] = f_fft[i] / g_fft[i];
    }
    return result;
}

std::vector<std::complex<double>> adj_fft(const std::vector<std::complex<double>>& f_fft) {
    int deg = f_fft.size();
    std::vector<std::complex<double>> result(deg);
    for (int i = 0; i < deg; i++) {
        result[i] = std::conj(f_fft[i]);
    }
    return result;
}

std::vector<double> sub(const std::vector<double>& f, const std::vector<double>& g) {
    return add(f, neg(g));
}

std::vector<Complex> mul(const std::vector<double>& f, const std::vector<double>& g) {
    return ifft(mul_fft(fft(f), fft(g)));
}

std::vector<Complex> div(const std::vector<double>& f, const std::vector<double>& g) {
    return ifft(div_fft(fft(f), fft(g)));
}

std::vector<Complex> adj(const std::vector<double>& f) {
    return ifft(adj_fft(fft(f)));
}



double fft_ratio = 1;